import os
import unittest
from importlib.util import find_spec
from collections import OrderedDict

from estnltk import Text
from estnltk.converters import dict_to_layer, layer_to_dict
from estnltk_neural.taggers import StanzaSyntaxEnsembleTagger
from estnltk.downloader import get_resource_paths

# Try to get the resources path for stanzasyntaxensembletagger. If missing, do nothing. It's up for the user to download the missing resources
STANZA_SYNTAX_MODELS_PATH = get_resource_paths("stanzasyntaxensembletagger", only_latest=True, download_missing=False)

skip_message_missing_models = \
  "StanzaSyntaxEnsembleTagger's resources have not been downloaded. Use estnltk.download('stanzasyntaxensembletagger') to fetch the missing resources."

skip_message_missing_scipy = "Package scipy is required for running this test."

# Check if the ensemble models exist @ STANZA_SYNTAX_MODELS_PATH and can be tested
def ensemble_models_exist():
    if STANZA_SYNTAX_MODELS_PATH is None or not os.path.isdir(STANZA_SYNTAX_MODELS_PATH):
        return False
    ensemble_path = os.path.join(STANZA_SYNTAX_MODELS_PATH, 'et', 'depparse', 'ensemble_models')
    if not os.path.isdir(ensemble_path):
        return False
    models_count = 0
    for model in os.listdir(ensemble_path):
        models_count += 1 if model.endswith('.pt') else 0
    return models_count > 0

# Checks whether the scipy package exists (required only for find_entropy settings)
def scipy_exists():
    return (find_spec('scipy') is not None)

@unittest.skipIf(STANZA_SYNTAX_MODELS_PATH is None, skip_message_missing_models)
@unittest.skipIf( not ensemble_models_exist(), skip_message_missing_models )
def test_stanza_syntax_ensemble_tagger():
    # 1) Smoke test StanzaSyntaxEnsembleTagger (with 'las_coherence' aggregation_algorithm)
    text = Text('Väike jänes jooksis metsa! Mina ei jookse kuhugi.')

    text.tag_layer('morph_extended')
    stanza_ensemble_tagger = StanzaSyntaxEnsembleTagger(output_layer='stanza_ensemble_syntax',
                                                        random_pick_seed=5, 
                                                        random_pick_max_score_seed=3)
    stanza_ensemble_tagger.tag(text)

    assert 'stanza_ensemble_syntax' in text.layers
    expected_output_layer_dict = \
        {'ambiguous': False,
         'attributes': ('id',
                        'lemma',
                        'upostag',
                        'xpostag',
                        'feats',
                        'head',
                        'deprel',
                        'deps',
                        'misc'),
         'enveloping': None,
         'meta': {},
         'name': 'stanza_ensemble_syntax',
         'parent': 'morph_extended',
         'secondary_attributes': (),
         'serialisation_module': None,
         'spans': [{'annotations': [{'deprel': 'amod',
                                     'deps': '_',
                                     'feats': OrderedDict([('pos', 'pos'),
                                                           ('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 2,
                                     'id': 1,
                                     'lemma': 'väike',
                                     'misc': '_',
                                     'upostag': 'A',
                                     'xpostag': 'A'}],
                    'base_span': (0, 5)},
                   {'annotations': [{'deprel': 'nsubj',
                                     'deps': '_',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 3,
                                     'id': 2,
                                     'lemma': 'jänes',
                                     'misc': '_',
                                     'upostag': 'S',
                                     'xpostag': 'S'}],
                    'base_span': (6, 11)},
                   {'annotations': [{'deprel': 'root',
                                     'deps': '_',
                                     'feats': OrderedDict([('main', 'main'),
                                                           ('indic', 'indic'),
                                                           ('impf', 'impf'),
                                                           ('ps3', 'ps3'),
                                                           ('sg', 'sg'),
                                                           ('ps', 'ps'),
                                                           ('af', 'af')]),
                                     'head': 0,
                                     'id': 3,
                                     'lemma': 'jooksma',
                                     'misc': '_',
                                     'upostag': 'V',
                                     'xpostag': 'V'}],
                    'base_span': (12, 19)},
                   {'annotations': [{'deprel': 'obl',
                                     'deps': '_',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('adit', 'adit')]),
                                     'head': 3,
                                     'id': 4,
                                     'lemma': 'mets',
                                     'misc': '_',
                                     'upostag': 'S',
                                     'xpostag': 'S'}],
                    'base_span': (20, 25)},
                   {'annotations': [{'deprel': 'punct',
                                     'deps': '_',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'id': 5,
                                     'lemma': '!',
                                     'misc': '_',
                                     'upostag': 'Z',
                                     'xpostag': 'Z'}],
                    'base_span': (25, 26)},
                   {'annotations': [{'deprel': 'nsubj',
                                     'deps': '_',
                                     'feats': OrderedDict([('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 3,
                                     'id': 1,
                                     'lemma': 'mina',
                                     'misc': '_',
                                     'upostag': 'P',
                                     'xpostag': 'P'}],
                    'base_span': (27, 31)},
                   {'annotations': [{'deprel': 'aux',
                                     'deps': '_',
                                     'feats': OrderedDict([('aux', 'aux'),
                                                           ('neg', 'neg')]),
                                     'head': 3,
                                     'id': 2,
                                     'lemma': 'ei',
                                     'misc': '_',
                                     'upostag': 'V',
                                     'xpostag': 'V'}],
                    'base_span': (32, 34)},
                   {'annotations': [{'deprel': 'root',
                                     'deps': '_',
                                     'feats': OrderedDict([('mod', 'mod'),
                                                           ('imper', 'imper'),
                                                           ('pres', 'pres'),
                                                           ('ps2', 'ps2'),
                                                           ('sg', 'sg'),
                                                           ('ps', 'ps'),
                                                           ('af', 'af')]),
                                     'head': 0,
                                     'id': 3,
                                     'lemma': 'jooksma',
                                     'misc': '_',
                                     'upostag': 'V',
                                     'xpostag': 'V'}],
                    'base_span': (35, 41)},
                   {'annotations': [{'deprel': 'advmod',
                                     'deps': '_',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'id': 4,
                                     'lemma': 'kuhugi',
                                     'misc': '_',
                                     'upostag': 'D',
                                     'xpostag': 'D'}],
                    'base_span': (42, 48)},
                   {'annotations': [{'deprel': 'punct',
                                     'deps': '_',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'id': 5,
                                     'lemma': '.',
                                     'misc': '_',
                                     'upostag': 'Z',
                                     'xpostag': 'Z'}],
                    'base_span': (48, 49)}]}
    #                
    #from pprint import pprint
    #print( layer_to_dict(text['stanza_ensemble_syntax']) )
    #
    assert expected_output_layer_dict == layer_to_dict(text['stanza_ensemble_syntax'])

    # 2) Test that StanzaSyntaxEnsembleTagger works on detached_layers
    text2 = Text('Väike jänes jooksis metsa! Mina ei jookse kuhugi.')
    text2.tag_layer(['sentences', 'morph_extended'])
    # detach layers from Text obj
    detached_layers = {}
    for layer in ['morph_extended', 'morph_analysis', 'sentences', 'words', \
                  'compound_tokens', 'tokens']:
        detached_layers[layer] = text2.pop_layer(layer)
    assert len(text2.layers) == 0
    # Tag with detached layers
    stanza_me_layer = stanza_ensemble_tagger.make_layer(text2, detached_layers)
    
    # Different random choiches for ambiguous words result in slightly
    # different output layer, this is an expected result
    expected_output_layer_dict_2 = \
        {'ambiguous': False,
         'attributes': ('id',
                        'lemma',
                        'upostag',
                        'xpostag',
                        'feats',
                        'head',
                        'deprel',
                        'deps',
                        'misc'),
         'enveloping': None,
         'meta': {},
         'name': 'stanza_ensemble_syntax',
         'parent': 'morph_extended',
         'secondary_attributes': (),
         'serialisation_module': None,
         'spans': [{'annotations': [{'deprel': 'amod',
                                     'deps': '_',
                                     'feats': OrderedDict([('pos', 'pos'),
                                                           ('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 2,
                                     'id': 1,
                                     'lemma': 'väike',
                                     'misc': '_',
                                     'upostag': 'A',
                                     'xpostag': 'A'}],
                    'base_span': (0, 5)},
                   {'annotations': [{'deprel': 'nsubj',
                                     'deps': '_',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 3,
                                     'id': 2,
                                     'lemma': 'jänes',
                                     'misc': '_',
                                     'upostag': 'S',
                                     'xpostag': 'S'}],
                    'base_span': (6, 11)},
                   {'annotations': [{'deprel': 'root',
                                     'deps': '_',
                                     'feats': OrderedDict([('aux', 'aux'),
                                                           ('indic', 'indic'),
                                                           ('impf', 'impf'),
                                                           ('ps3', 'ps3'),
                                                           ('sg', 'sg'),
                                                           ('ps', 'ps'),
                                                           ('af', 'af')]),
                                     'head': 0,
                                     'id': 3,
                                     'lemma': 'jooksma',
                                     'misc': '_',
                                     'upostag': 'V',
                                     'xpostag': 'V'}],
                    'base_span': (12, 19)},
                   {'annotations': [{'deprel': 'obl',
                                     'deps': '_',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('adit', 'adit')]),
                                     'head': 3,
                                     'id': 4,
                                     'lemma': 'mets',
                                     'misc': '_',
                                     'upostag': 'S',
                                     'xpostag': 'S'}],
                    'base_span': (20, 25)},
                   {'annotations': [{'deprel': 'punct',
                                     'deps': '_',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'id': 5,
                                     'lemma': '!',
                                     'misc': '_',
                                     'upostag': 'Z',
                                     'xpostag': 'Z'}],
                    'base_span': (25, 26)},
                   {'annotations': [{'deprel': 'nsubj',
                                     'deps': '_',
                                     'feats': OrderedDict([('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 3,
                                     'id': 1,
                                     'lemma': 'mina',
                                     'misc': '_',
                                     'upostag': 'P',
                                     'xpostag': 'P'}],
                    'base_span': (27, 31)},
                   {'annotations': [{'deprel': 'aux',
                                     'deps': '_',
                                     'feats': OrderedDict([('aux', 'aux'),
                                                           ('neg', 'neg')]),
                                     'head': 3,
                                     'id': 2,
                                     'lemma': 'ei',
                                     'misc': '_',
                                     'upostag': 'V',
                                     'xpostag': 'V'}],
                    'base_span': (32, 34)},
                   {'annotations': [{'deprel': 'root',
                                     'deps': '_',
                                     'feats': OrderedDict([('main', 'main'),
                                                           ('indic', 'indic'),
                                                           ('pres', 'pres'),
                                                           ('ps', 'ps'),
                                                           ('neg', 'neg')]),
                                     'head': 0,
                                     'id': 3,
                                     'lemma': 'jooksma',
                                     'misc': '_',
                                     'upostag': 'V',
                                     'xpostag': 'V'}],
                    'base_span': (35, 41)},
                   {'annotations': [{'deprel': 'advmod',
                                     'deps': '_',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'id': 4,
                                     'lemma': 'kuhugi',
                                     'misc': '_',
                                     'upostag': 'D',
                                     'xpostag': 'D'}],
                    'base_span': (42, 48)},
                   {'annotations': [{'deprel': 'punct',
                                     'deps': '_',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'id': 5,
                                     'lemma': '.',
                                     'misc': '_',
                                     'upostag': 'Z',
                                     'xpostag': 'Z'}],
                    'base_span': (48, 49)}]}
    
    #from pprint import pprint
    #pprint( layer_to_dict(stanza_me_layer) )
    
    assert expected_output_layer_dict_2 == layer_to_dict(stanza_me_layer)


@unittest.skipIf(STANZA_SYNTAX_MODELS_PATH is None, skip_message_missing_models)
@unittest.skipIf( not ensemble_models_exist(), skip_message_missing_models )
def test_stanza_syntax_ensemble_tagger_with_majority_voting_aggregation_algorithm():
    # 1) Smoke test StanzaSyntaxEnsembleTagger (with 'majority_voting' aggregation_algorithm)
    
    text = Text('Väike jänes jooksis metsa! Mina ei jookse kuhugi.')
    text.tag_layer('morph_extended')
    
    stanza_ensemble_tagger = StanzaSyntaxEnsembleTagger(output_layer='stanza_ensemble_syntax',
                                                        random_pick_seed=5, 
                                                        aggregation_algorithm='majority_voting',
                                                        random_pick_max_score_seed=3)
    stanza_ensemble_tagger.tag(text)
    output_layer = text[stanza_ensemble_tagger.output_layer]
    
    # Different random choiches for ambiguous words result in slightly
    # different output layer, this is an expected result
    expected_output_layer_dict_3 = \
        {'ambiguous': False,
         'attributes': ('id',
                        'lemma',
                        'upostag',
                        'xpostag',
                        'feats',
                        'head',
                        'deprel',
                        'deps',
                        'misc'),
         'enveloping': None,
         'meta': {},
         'name': 'stanza_ensemble_syntax',
         'parent': 'morph_extended',
         'secondary_attributes': (),
         'serialisation_module': None,
         'spans': [{'annotations': [{'deprel': 'amod',
                                     'deps': '_',
                                     'feats': OrderedDict([('pos', 'pos'),
                                                           ('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 2,
                                     'id': 1,
                                     'lemma': 'väike',
                                     'misc': '_',
                                     'upostag': 'A',
                                     'xpostag': 'A'}],
                    'base_span': (0, 5)},
                   {'annotations': [{'deprel': 'nsubj',
                                     'deps': '_',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 3,
                                     'id': 2,
                                     'lemma': 'jänes',
                                     'misc': '_',
                                     'upostag': 'S',
                                     'xpostag': 'S'}],
                    'base_span': (6, 11)},
                   {'annotations': [{'deprel': 'root',
                                     'deps': '_',
                                     'feats': OrderedDict([('main', 'main'),
                                                           ('indic', 'indic'),
                                                           ('impf', 'impf'),
                                                           ('ps3', 'ps3'),
                                                           ('sg', 'sg'),
                                                           ('ps', 'ps'),
                                                           ('af', 'af')]),
                                     'head': 0,
                                     'id': 3,
                                     'lemma': 'jooksma',
                                     'misc': '_',
                                     'upostag': 'V',
                                     'xpostag': 'V'}],
                    'base_span': (12, 19)},
                   {'annotations': [{'deprel': 'obl',
                                     'deps': '_',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('adit', 'adit')]),
                                     'head': 3,
                                     'id': 4,
                                     'lemma': 'mets',
                                     'misc': '_',
                                     'upostag': 'S',
                                     'xpostag': 'S'}],
                    'base_span': (20, 25)},
                   {'annotations': [{'deprel': 'punct',
                                     'deps': '_',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'id': 5,
                                     'lemma': '!',
                                     'misc': '_',
                                     'upostag': 'Z',
                                     'xpostag': 'Z'}],
                    'base_span': (25, 26)},
                   {'annotations': [{'deprel': 'nsubj',
                                     'deps': '_',
                                     'feats': OrderedDict([('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 3,
                                     'id': 1,
                                     'lemma': 'mina',
                                     'misc': '_',
                                     'upostag': 'P',
                                     'xpostag': 'P'}],
                    'base_span': (27, 31)},
                   {'annotations': [{'deprel': 'aux',
                                     'deps': '_',
                                     'feats': OrderedDict([('aux', 'aux'),
                                                           ('neg', 'neg')]),
                                     'head': 3,
                                     'id': 2,
                                     'lemma': 'ei',
                                     'misc': '_',
                                     'upostag': 'V',
                                     'xpostag': 'V'}],
                    'base_span': (32, 34)},
                   {'annotations': [{'deprel': 'root',
                                     'deps': '_',
                                     'feats': OrderedDict([('mod', 'mod'),
                                                           ('imper', 'imper'),
                                                           ('pres', 'pres'),
                                                           ('ps2', 'ps2'),
                                                           ('sg', 'sg'),
                                                           ('ps', 'ps'),
                                                           ('af', 'af')]),
                                     'head': 0,
                                     'id': 3,
                                     'lemma': 'jooksma',
                                     'misc': '_',
                                     'upostag': 'V',
                                     'xpostag': 'V'}],
                    'base_span': (35, 41)},
                   {'annotations': [{'deprel': 'advmod',
                                     'deps': '_',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'id': 4,
                                     'lemma': 'kuhugi',
                                     'misc': '_',
                                     'upostag': 'D',
                                     'xpostag': 'D'}],
                    'base_span': (42, 48)},
                   {'annotations': [{'deprel': 'punct',
                                     'deps': '_',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'id': 5,
                                     'lemma': '.',
                                     'misc': '_',
                                     'upostag': 'Z',
                                     'xpostag': 'Z'}],
                    'base_span': (48, 49)}]}
    
    #from pprint import pprint
    #pprint( layer_to_dict(output_layer) )
    
    assert expected_output_layer_dict_3 == layer_to_dict(output_layer)


def _normalize_entropy_values( layer_dict ):
    # Normalizes entropy values to rounded strings for better comparability
    for span in layer_dict['spans']:
        for annotation in span['annotations']:
            for key in annotation.keys():
                if key.endswith('entropy'):
                    annotation[key] = f'{annotation[key]:.4f}'
    return layer_dict


@unittest.skipIf(STANZA_SYNTAX_MODELS_PATH is None, skip_message_missing_models)
@unittest.skipIf( not scipy_exists(), skip_message_missing_scipy )
@unittest.skipIf( not ensemble_models_exist(), skip_message_missing_models )
def test_stanza_syntax_ensemble_tagger_with_find_entropy():
    # Test StanzaSyntaxEnsembleTagger's find_entropy functionality
    
    text = Text('Jänes otsis lahendusi tulevikuks. Seda traditsiooni hoiame elus ka 3 aastat hiljem.')
    text.tag_layer('morph_extended')
    
    stanza_ensemble_tagger = StanzaSyntaxEnsembleTagger(output_layer='stanza_ensemble_syntax',
                                                        random_pick_seed=5, 
                                                        random_pick_max_score_seed=3, 
                                                        find_entropy=True, 
                                                        deprel_entropy=True, 
                                                        head_entropy=True, 
                                                        add_voting_results=True, 
                                                        )
    stanza_ensemble_tagger.tag(text)
    output_layer = text[stanza_ensemble_tagger.output_layer]
    
    expected_layer_with_normalized_entropy = \
        {'ambiguous': False,
         'attributes': ('id',
                        'lemma',
                        'upostag',
                        'xpostag',
                        'feats',
                        'head',
                        'deprel',
                        'deps',
                        'misc',
                        'max_votes',
                        'entropy',
                        'voting_results',
                        'deprel_max',
                        'deprel_max_votes',
                        'deprel_entropy',
                        'head_max',
                        'head_max_votes',
                        'head_entropy'),
         'enveloping': None,
         'meta': {},
         'name': 'stanza_ensemble_syntax',
         'parent': 'morph_extended',
         'secondary_attributes': (),
         'serialisation_module': None,
         'spans': [{'annotations': [{'deprel': 'nsubj',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'nsubj',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('nom', 'nom')]),
                                     'head': 2,
                                     'head_entropy': '0.0000',
                                     'head_max': 2,
                                     'head_max_votes': 10,
                                     'id': 1,
                                     'lemma': 'jänes',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'S',
                                     'voting_results': [('nsubj_2', 10)],
                                     'xpostag': 'S'}],
                    'base_span': (0, 5)},
                   {'annotations': [{'deprel': 'root',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'root',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict([('main', 'main'),
                                                           ('indic', 'indic'),
                                                           ('impf', 'impf'),
                                                           ('ps3', 'ps3'),
                                                           ('sg', 'sg'),
                                                           ('ps', 'ps'),
                                                           ('af', 'af')]),
                                     'head': 0,
                                     'head_entropy': '0.0000',
                                     'head_max': 0,
                                     'head_max_votes': 10,
                                     'id': 2,
                                     'lemma': 'otsima',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'V',
                                     'voting_results': [('root_0', 10)],
                                     'xpostag': 'V'}],
                    'base_span': (6, 11)},
                   {'annotations': [{'deprel': 'obj',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'obj',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('pl', 'pl'),
                                                           ('part', 'part')]),
                                     'head': 2,
                                     'head_entropy': '0.0000',
                                     'head_max': 2,
                                     'head_max_votes': 10,
                                     'id': 3,
                                     'lemma': 'lahendus',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'S',
                                     'voting_results': [('obj_2', 10)],
                                     'xpostag': 'S'}],
                    'base_span': (12, 21)},
                   {'annotations': [{'deprel': 'xcomp',
                                     'deprel_entropy': '0.5004',
                                     'deprel_max': 'xcomp',
                                     'deprel_max_votes': 8,
                                     'deps': '_',
                                     'entropy': '0.5004',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('tr', 'tr')]),
                                     'head': 2,
                                     'head_entropy': '0.0000',
                                     'head_max': 2,
                                     'head_max_votes': 10,
                                     'id': 4,
                                     'lemma': 'tulevik',
                                     'max_votes': 8,
                                     'misc': '_',
                                     'upostag': 'S',
                                     'voting_results': [('xcomp_2', 8), ('obl_2', 2)],
                                     'xpostag': 'S'}],
                    'base_span': (22, 32)},
                   {'annotations': [{'deprel': 'punct',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'punct',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict(),
                                     'head': 2,
                                     'head_entropy': '0.0000',
                                     'head_max': 2,
                                     'head_max_votes': 10,
                                     'id': 5,
                                     'lemma': '.',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'Z',
                                     'voting_results': [('punct_2', 10)],
                                     'xpostag': 'Z'}],
                    'base_span': (32, 33)},
                   {'annotations': [{'deprel': 'det',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'det',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict([('sg', 'sg'),
                                                           ('part', 'part')]),
                                     'head': 2,
                                     'head_entropy': '0.0000',
                                     'head_max': 2,
                                     'head_max_votes': 10,
                                     'id': 1,
                                     'lemma': 'see',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'P',
                                     'voting_results': [('det_2', 10)],
                                     'xpostag': 'P'}],
                    'base_span': (34, 38)},
                   {'annotations': [{'deprel': 'obj',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'obj',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('part', 'part')]),
                                     'head': 3,
                                     'head_entropy': '0.0000',
                                     'head_max': 3,
                                     'head_max_votes': 10,
                                     'id': 2,
                                     'lemma': 'traditsioon',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'S',
                                     'voting_results': [('obj_3', 10)],
                                     'xpostag': 'S'}],
                    'base_span': (39, 51)},
                   {'annotations': [{'deprel': 'root',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'root',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict([('mod', 'mod'),
                                                           ('indic', 'indic'),
                                                           ('pres', 'pres'),
                                                           ('ps1', 'ps1'),
                                                           ('pl', 'pl'),
                                                           ('ps', 'ps'),
                                                           ('af', 'af')]),
                                     'head': 0,
                                     'head_entropy': '0.0000',
                                     'head_max': 0,
                                     'head_max_votes': 10,
                                     'id': 3,
                                     'lemma': 'hoidma',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'V',
                                     'voting_results': [('root_0', 10)],
                                     'xpostag': 'V'}],
                    'base_span': (52, 58)},
                   {'annotations': [{'deprel': 'obl',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'obl',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('in', 'in')]),
                                     'head': 3,
                                     'head_entropy': '0.0000',
                                     'head_max': 3,
                                     'head_max_votes': 10,
                                     'id': 4,
                                     'lemma': 'elu',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'S',
                                     'voting_results': [('obl_3', 10)],
                                     'xpostag': 'S'}],
                    'base_span': (59, 63)},
                   {'annotations': [{'deprel': 'advmod',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'advmod',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '1.0297',
                                     'feats': OrderedDict(),
                                     'head': 6,
                                     'head_entropy': '1.0297',
                                     'head_max': 6,
                                     'head_max_votes': 5,
                                     'id': 5,
                                     'lemma': 'ka',
                                     'max_votes': 5,
                                     'misc': '_',
                                     'upostag': 'D',
                                     'voting_results': [('advmod_6', 5),
                                                        ('advmod_8', 3),
                                                        ('advmod_3', 2)],
                                     'xpostag': 'D'}],
                    'base_span': (64, 66)},
                   {'annotations': [{'deprel': 'nummod',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'nummod',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict([('card', 'card'),
                                                           ('<?>', '<?>'),
                                                           ('digit', 'digit')]),
                                     'head': 7,
                                     'head_entropy': '0.0000',
                                     'head_max': 7,
                                     'head_max_votes': 10,
                                     'id': 6,
                                     'lemma': '3',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'N',
                                     'voting_results': [('nummod_7', 10)],
                                     'xpostag': 'N'}],
                    'base_span': (67, 68)},
                   {'annotations': [{'deprel': 'obl',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'obl',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.3251',
                                     'feats': OrderedDict([('com', 'com'),
                                                           ('sg', 'sg'),
                                                           ('part', 'part')]),
                                     'head': 8,
                                     'head_entropy': '0.3251',
                                     'head_max': 8,
                                     'head_max_votes': 9,
                                     'id': 7,
                                     'lemma': 'aasta',
                                     'max_votes': 9,
                                     'misc': '_',
                                     'upostag': 'S',
                                     'voting_results': [('obl_8', 9), ('obl_3', 1)],
                                     'xpostag': 'S'}],
                    'base_span': (69, 75)},
                   {'annotations': [{'deprel': 'advmod',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'advmod',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'head_entropy': '0.0000',
                                     'head_max': 3,
                                     'head_max_votes': 10,
                                     'id': 8,
                                     'lemma': 'hiljem',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'D',
                                     'voting_results': [('advmod_3', 10)],
                                     'xpostag': 'D'}],
                    'base_span': (76, 82)},
                   {'annotations': [{'deprel': 'punct',
                                     'deprel_entropy': '0.0000',
                                     'deprel_max': 'punct',
                                     'deprel_max_votes': 10,
                                     'deps': '_',
                                     'entropy': '0.0000',
                                     'feats': OrderedDict(),
                                     'head': 3,
                                     'head_entropy': '0.0000',
                                     'head_max': 3,
                                     'head_max_votes': 10,
                                     'id': 9,
                                     'lemma': '.',
                                     'max_votes': 10,
                                     'misc': '_',
                                     'upostag': 'Z',
                                     'voting_results': [('punct_3', 10)],
                                     'xpostag': 'Z'}],
                    'base_span': (82, 83)}]}
    
    #from pprint import pprint
    #layer_dict = _normalize_entropy_values( layer_to_dict(output_layer) )
    #pprint( layer_dict )

    assert expected_layer_with_normalized_entropy == \
                _normalize_entropy_values( layer_to_dict(output_layer) )

