import regex as re
from explainable_regex import ExplainableRegex

# Symbols

GAP = ExplainableRegex(r'([ \t]+)')
GAP.full_match(' ')
GAP.full_match('\t')
GAP.no_match('\n')
GAP.full_match('  ')
GAP.full_match(' \t')
GAP.no_match('\n ')
GAP.test()

DASH = ExplainableRegex(r'([ \t]*-[ \t]*)')
DASH.full_match('-')
DASH.full_match(' -')
DASH.full_match('- ')
DASH.full_match(' - ')
DASH.full_match('  -')
DASH.full_match('\t-')
DASH.full_match('-\t')
DASH.no_match('\n-')
DASH.no_match('-\n')
DASH.test()

DIV = ExplainableRegex(r'([ \t]*/[ \t]*)')
DIV.full_match('/')
DIV.full_match(' /')
DIV.full_match('/ ')
DIV.full_match(' / ')
DIV.full_match('  /')
DIV.full_match('\t/')
DIV.full_match('/\t')
DIV.no_match('\n/')
DIV.no_match('/\n')
DIV.test()

EQ = ExplainableRegex(r'([ \t]*=[ \t]*)')
EQ.full_match('=')
EQ.full_match('\t=')
EQ.full_match(' = ')
EQ.full_match('\t=')
EQ.no_match('=\n')
EQ.no_match('\n=')
EQ.test()

COLON = ExplainableRegex(r'([ \t]*:[ \t]*)')
COLON.full_match('\t:')
COLON.full_match(' : ')
COLON.full_match(':')
COLON.full_match('\t:')
COLON.no_match(':\n')
COLON.no_match('\n:')
COLON.test()

COMA = ExplainableRegex(r'([ \t]*,[ \t]*)')
COMA.full_match(',')
COMA.full_match('\t,')
COMA.full_match(' , ')
COMA.full_match('\t,')
COMA.no_match(',\n')
COMA.no_match('\n,')
COMA.test()

ARROW = ExplainableRegex(r'([ \t]*(-*>)[ \t]*)')
ARROW.full_match('>')
ARROW.full_match('->')
ARROW.full_match('-->')
ARROW.full_match('--->')
ARROW.full_match(' -> ')
ARROW.full_match('\t-> ')
ARROW.no_match(' ->\n')
ARROW.test()

ELLIPSE = ExplainableRegex(r'([ \t]*(\.{2,4})[ \t]*)')

SCORE_VALUE = ExplainableRegex(r'[0-9]{1,2}')
SCORE_VALUE.full_match('0')
SCORE_VALUE.full_match('1')
SCORE_VALUE.full_match('03')
SCORE_VALUE.full_match('43')
SCORE_VALUE.no_match('24 ')
SCORE_VALUE.no_match('24p')
SCORE_VALUE.test()

SCORE = ExplainableRegex(rf'(?P<score>{SCORE_VALUE})')
MIN_SCORE = ExplainableRegex(rf'(?P<min_score>{SCORE_VALUE})')
MAX_SCORE = ExplainableRegex(rf'(?P<max_score>{SCORE_VALUE})')
GAINED_SCORE = ExplainableRegex(rf'(?P<gained_score>{SCORE_VALUE})')
NOMINAL_SCORE = ExplainableRegex(rf'(?P<nominal_score>{SCORE_VALUE})')
INITIAL_SCORE = ExplainableRegex(rf'(?P<initial_score>{SCORE_VALUE})')
FINAL_SCORE = ExplainableRegex(rf'(?P<final_score>{SCORE_VALUE})')
SCORE.partial_match('12','12','score')
MIN_SCORE.partial_match('12','12','min_score')
MAX_SCORE.partial_match('12','12','max_score')
GAINED_SCORE.partial_match('12','12','gained_score')
NOMINAL_SCORE.partial_match('12','12','nominal_score')
INITIAL_SCORE.partial_match('12','12','initial_score')
FINAL_SCORE.partial_match('12','12','final_score')
SCORE.test()
MIN_SCORE.test()
MAX_SCORE.test()
GAINED_SCORE.test()
NOMINAL_SCORE.test()
INITIAL_SCORE.test()
FINAL_SCORE.test()

DECOMPOSED_SCORE = ExplainableRegex(r'(?P<score>[0-9]{1,2}( *[+] *[0-9]{1,2})+)')
DECOMPOSED_SCORE.partial_match('12+3','12+3','score')
DECOMPOSED_SCORE.partial_match('12 + 3 + 4','12 + 3 + 4','score')
DECOMPOSED_SCORE.test()


SCORE_UNIT = ExplainableRegex(r'(punkti|punkt|pallile|palli|pall|p)')
SCORE_UNIT.partial_match('p','p')
SCORE_UNIT.partial_match('pallile','pallile')
SCORE_UNIT.partial_match('palli','palli')
SCORE_UNIT.partial_match('pall','pall')
SCORE_UNIT.partial_match('punkt','punkt')
SCORE_UNIT.partial_match('punkti','punkti')
SCORE_UNIT.test()

SCORE_ENTRY_1 = ExplainableRegex(rf'{SCORE}\.p')
SCORE_ENTRY_1.partial_match('4.p ', '4.p')
SCORE_ENTRY_1.partial_match('4.punkti ', '4.p')
SCORE_ENTRY_1.partial_match('4.p ', '4','score')
SCORE_ENTRY_1.test()

SCORE_ENTRY_2 = ExplainableRegex(rf'({SCORE}( *{SCORE_UNIT})?)')
SCORE_ENTRY_2.partial_match('0','0')
SCORE_ENTRY_2.partial_match('1','1')
SCORE_ENTRY_2.partial_match('03','03')
SCORE_ENTRY_2.partial_match('43 ','43')
SCORE_ENTRY_2.partial_match('24p','24p')
SCORE_ENTRY_2.partial_match('4 p','4 p')
SCORE_ENTRY_2.partial_match('4  p','4  p')
SCORE_ENTRY_2.partial_match('4 palli','4 palli')
SCORE_ENTRY_2.partial_match('4 punkti','4','score')
SCORE_ENTRY_2.test()

SCORE_ENTRY_3 = ExplainableRegex(rf'({SCORE}/n{EQ}{SCORE_VALUE}{DASH}{SCORE_VALUE})')
SCORE_ENTRY_3.partial_match('26/n=26-30','26/n=26-30')
SCORE_ENTRY_3.partial_match('26/n = 26 - 30','26/n = 26 - 30')
SCORE_ENTRY_3.partial_match('26/n = 26 - 30','26','score')
SCORE_ENTRY_3.test()

SCORE_ENTRY_4 = ExplainableRegex(rf'((skoor){GAP}{DECOMPOSED_SCORE}( *{SCORE_UNIT})?)')
SCORE_ENTRY_4.partial_match('skoor 21+2','skoor 21+2')
SCORE_ENTRY_4.partial_match('skoor 21 + 2','skoor 21 + 2')
SCORE_ENTRY_4.partial_match('skoor 21+2','21+2','score')
SCORE_ENTRY_4.test()

SCORE_ENTRY = ExplainableRegex(rf'({SCORE_ENTRY_1}|{SCORE_ENTRY_2}|{SCORE_ENTRY_3}|{SCORE_ENTRY_4})')
SCORE_ENTRY.partial_match('43 ','43')
SCORE_ENTRY.partial_match('4 palli','4 palli')
SCORE_ENTRY.partial_match('3.p. ta','3.p')
SCORE_ENTRY.partial_match('skoor 21+2', '21+2','score')
SCORE_ENTRY.partial_match('4 punkti ','4','score')
SCORE_ENTRY.test()

INITIAL_ENTRY = ExplainableRegex(rf'({INITIAL_SCORE}( *{SCORE_UNIT})?)')
INITIAL_ENTRY.partial_match('0','0')
INITIAL_ENTRY.partial_match('1','1')
INITIAL_ENTRY.partial_match('03','03')
INITIAL_ENTRY.partial_match('43 ','43')
INITIAL_ENTRY.partial_match('24p','24p')
INITIAL_ENTRY.partial_match('4 p','4 p')
INITIAL_ENTRY.partial_match('4  p','4  p')
INITIAL_ENTRY.partial_match('4 palli', '4 palli')
INITIAL_ENTRY.partial_match('4 punkti', '4','initial_score')
INITIAL_ENTRY.test()

MID_ENTRY = ExplainableRegex(rf'({SCORE_VALUE}( *{SCORE_UNIT})?)')
MID_ENTRY.partial_match('0','0')
MID_ENTRY.partial_match('1','1')
MID_ENTRY.partial_match('03','03')
MID_ENTRY.partial_match('43 ','43')
MID_ENTRY.partial_match('24p','24p')
MID_ENTRY.partial_match('4 p','4 p')
MID_ENTRY.partial_match('4  p','4  p')
MID_ENTRY.partial_match('4 palli', '4 palli')
MID_ENTRY.test()

FINAL_ENTRY = ExplainableRegex(rf'({FINAL_SCORE}( *{SCORE_UNIT})?)')
FINAL_ENTRY.partial_match('0','0')
FINAL_ENTRY.partial_match('1','1')
FINAL_ENTRY.partial_match('03','03')
FINAL_ENTRY.partial_match('43 ','43')
FINAL_ENTRY.partial_match('24p','24p')
FINAL_ENTRY.partial_match('4 p','4 p')
FINAL_ENTRY.partial_match('4  p','4  p')
FINAL_ENTRY.partial_match('4 palli', '4 palli')
FINAL_ENTRY.partial_match('4 punkti', '4','final_score')
FINAL_ENTRY.test()

SCORE_PP_RANGE = ExplainableRegex(fr'({MIN_SCORE} *p{DASH}{MAX_SCORE} *p)')
SCORE_DD_RANGE = ExplainableRegex(fr'({MIN_SCORE}{ELLIPSE}{MAX_SCORE})')
SCORE_STD_RANGE = ExplainableRegex(fr'({MIN_SCORE}{DASH}{MAX_SCORE}({GAP}?{SCORE_UNIT})?)')
SCORE_RANGE = ExplainableRegex(fr'({SCORE_STD_RANGE}|{SCORE_DD_RANGE}|{SCORE_PP_RANGE})')
SCORE_RANGE.partial_match('3-4','3-4')
SCORE_RANGE.partial_match('3 - 4','3 - 4')
SCORE_RANGE.partial_match('3 -4 ','3 -4')
SCORE_RANGE.partial_match('3- 4 ','3- 4')
SCORE_RANGE.no_match(' 3-4')
SCORE_RANGE.no_match('3-4 ')
SCORE_RANGE.partial_match('3 - 4p','3 - 4p')
SCORE_RANGE.partial_match('3p-8p','3p-8p')
SCORE_RANGE.partial_match('3 p - 4 p ','3 p - 4 p')
SCORE_RANGE.partial_match('4 .... 10 ', '4 .... 10')
SCORE_RANGE.no_match('3 palli - 4p')
SCORE_RANGE.no_match('3-6p.')
SCORE_RANGE.no_match('3-7p ')
SCORE_RANGE.test()

TEXTUAL_SCORE_RANGE = SCORE_RANGE
TEXTUAL_SCORE_RANGE.partial_match('20-30 ', '20-30')
TEXTUAL_SCORE_RANGE.partial_match('20-30 punkti','20-30 punkti')
TEXTUAL_SCORE_RANGE.test()

SCORE_RATIO_UNIT = ExplainableRegex(r'(punkti|punkt|pallile|palli|pall|p|—st|-st|st)')
SCORE_RATIO_UNIT.partial_match('p','p')
SCORE_RATIO_UNIT.partial_match('st','st')
SCORE_RATIO_UNIT.partial_match('-st','-st')
SCORE_RATIO_UNIT.partial_match('—st','—st')
SCORE_RATIO_UNIT.partial_match('pallile','pallile')
SCORE_RATIO_UNIT.partial_match('palli','palli')
SCORE_RATIO_UNIT.partial_match('pall','pall')
SCORE_RATIO_UNIT.partial_match('punkt','punkt')
SCORE_RATIO_UNIT.partial_match('punkti','punkti')
SCORE_UNIT.test()

SCORE_RATIO_1 = ExplainableRegex(rf'({GAINED_SCORE}{DIV}{NOMINAL_SCORE}({GAP}?{SCORE_RATIO_UNIT})?)')
SCORE_RATIO_1.partial_match('7/10','7/10')
SCORE_RATIO_1.no_match('7/10')
SCORE_RATIO_1.partial_match('7/ 10','7/ 10')
SCORE_RATIO_1.partial_match('7 / 10','7 / 10')
SCORE_RATIO_1.partial_match('7/10p','7/10p')
SCORE_RATIO_1.partial_match('7/10 ','7/10')
SCORE_RATIO_1.partial_match('7/10-st','7/10-st')
SCORE_RATIO_1.partial_match('7/10 -st','7/10 -st')
SCORE_RATIO_1.test()

SCORE_RATIO_2 = ExplainableRegex(rf'({GAINED_SCORE}{GAP}?(palli|punki|punkti){GAP}?{NOMINAL_SCORE}(-st|st))')
SCORE_RATIO_2.partial_match('20 punkti 30-st.','20 punkti 30-st')
SCORE_RATIO_2.partial_match('20 punkti 30-st.','20','gained_score')
SCORE_RATIO_2.partial_match('20 punkti 30-st.','30','nominal_score')
SCORE_RATIO_2.partial_match('20 punki 30st.','20 punkti 30st')
SCORE_RATIO_2.partial_match('19 palli 30-st.','19 palli 30-st')
SCORE_RATIO_2.partial_match('25 punkti 30-st.','25 punkti 30-st')
SCORE_RATIO_2.test()

SCORE_RATIO_3 = ExplainableRegex(rf'(\({GAINED_SCORE}{DIV}{NOMINAL_SCORE}\))')
SCORE_RATIO_3.partial_match('(20/30) ','(20/30)')
SCORE_RATIO_3.partial_match('(20/30) ','20','gained_score')
SCORE_RATIO_3.partial_match('(20/30) ', '30','nominal_score')
SCORE_RATIO_3.partial_match('(20 / 30) ', '(20 / 30)')
SCORE_RATIO_3.test()

SCORE_RATIO_4 = ExplainableRegex(rf'({NOMINAL_SCORE}{GAP}(võimalikust|võimalikkust){GAP}{GAINED_SCORE}({GAP}?(punkti|palli)))')
SCORE_RATIO_4.partial_match('30 võimalikust 24 punkti.','30 võimalikust 24 punkti')
SCORE_RATIO_4.partial_match('30 võimalikust 24 punkti.','24','gained_score')
SCORE_RATIO_4.partial_match('30 võimalikust 24 punkti.','30','nominal_score')
SCORE_RATIO_4.test()

SCORE_RATIO_5 = ExplainableRegex(rf'(saadud{GAP}(punkte|palle){GAP}{NOMINAL_SCORE}(-st|st){GAP}{GAINED_SCORE}({GAP}?(punkti|palli))?)')
SCORE_RATIO_5.partial_match('saadud punkte 30-st 20 ','saadud punkte 30-st 20')
SCORE_RATIO_5.partial_match('saadud punkte 30-st 20 ','20','gained_score')
SCORE_RATIO_5.partial_match('saadud punkte 30-st 20 ','30','nominal_score')
SCORE_RATIO_5.test()

SCORE_RATIO_6 = ExplainableRegex(rf'({GAINED_SCORE}{GAP}?(punkti|palli){GAP}\({GAP}?{NOMINAL_SCORE}(-st|st){GAP}?\))')
SCORE_RATIO_6.partial_match('7 punkti	(30-st).','7 punkti	(30-st)')
SCORE_RATIO_6.partial_match('7 punkti	(30-st).','7','gained_score')
SCORE_RATIO_6.partial_match('7 punkti	(30-st).','30','nominal_score')
SCORE_RATIO_6.test()

SCORE_RATIO = ExplainableRegex(rf'({SCORE_RATIO_1}|{SCORE_RATIO_2}|{SCORE_RATIO_4}|{SCORE_RATIO_5}|{SCORE_RATIO_5})')
SCORE_RATIO.partial_match('20/30 punkti','20/30 punkti')
SCORE_RATIO.partial_match('20 punkti 30-st.','20 punkti 30-st')
SCORE_RATIO.no_match('(20/30)')
SCORE_RATIO.partial_match('saadud punkte 30-st 20 ','saadud punkte 30-st 20')
SCORE_RATIO.test()

TEXTUAL_SCORE_RATIO = ExplainableRegex(rf'({SCORE_RATIO_1}|{SCORE_RATIO_2}|{SCORE_RATIO_3}' \
                      rf'|{SCORE_RATIO_4}|{SCORE_RATIO_5}|{SCORE_RATIO_6})')
TEXTUAL_SCORE_RATIO.partial_match('20/30 punkti','20/30 punkti')
TEXTUAL_SCORE_RATIO.partial_match('20 punkti 30-st.','20 punkti 30-st')
TEXTUAL_SCORE_RATIO.partial_match('(20/30) ','(20/30)')
TEXTUAL_SCORE_RATIO.partial_match('saadud punkte 30-st 20 ','saadud punkte 30-st 20')
TEXTUAL_SCORE_RATIO.test()


# Name extensions

LEFT_EXT_24H = ExplainableRegex(r'24( |\t)*h( |\t)*$')
LEFT_EXT_24H.full_match('24h')
LEFT_EXT_24H.full_match('24 h')
LEFT_EXT_24H.full_match('24h ')
LEFT_EXT_24H.full_match('24 h ')
LEFT_EXT_24H.no_match(' 24 h ')
LEFT_EXT_24H.test()

RIGHT_EXT_24H = ExplainableRegex(r'^:?( |\t)*24( |\t)*h')
LEFT_EXT_24H.full_match('24h')
LEFT_EXT_24H.full_match('24 h')
LEFT_EXT_24H.full_match(' 24h')
LEFT_EXT_24H.full_match(' 24 h')
LEFT_EXT_24H.full_match(': 24 h')
LEFT_EXT_24H.full_match(':24h')
LEFT_EXT_24H.no_match(' 24 h ')
LEFT_EXT_24H.test()

RIGHT_EXT_SCORE = ExplainableRegex(r'^( |\t)*(skoor|skaala)')
RIGHT_EXT_24H.partial_match('skoor','skoor')
RIGHT_EXT_24H.partial_match('skoor:','skoor')
RIGHT_EXT_24H.partial_match('skaala','skaala')
RIGHT_EXT_24H.partial_match('skaala ','skaala')
RIGHT_EXT_24H.test()

RIGHT_EXT_BRACKET = ExplainableRegex(rf'^({GAP})?\)')
RIGHT_EXT_BRACKET.partial_match(')',')')
RIGHT_EXT_BRACKET.partial_match(' ) ',' )')
RIGHT_EXT_BRACKET.test()


RIGHT_EXT_CASE = ExplainableRegex(rf'^(-l|{DASH}l)')
RIGHT_EXT_CASE.partial_match('-l','-l')
RIGHT_EXT_CASE.partial_match(' -l',' -l')
RIGHT_EXT_CASE.partial_match(' -l ',' -l')
RIGHT_EXT_CASE.test()


MMSE_NAME_1 = r'Mini - mental test'
MMSE_NAME_2 = r'VMU'
MMSE_NAME_3 = r'[Vv]aimse seisundi miniuuring'
MMSE_NAME_4 = r'Mini-Mental State Examination'
MMSE_NAME_5 = rf'[Vv]aimse seisundi mini{DASH}?uuringu'

LEFT_MMSE_NAME_EXT = ExplainableRegex(rf'({MMSE_NAME_3}|{MMSE_NAME_4}|{MMSE_NAME_5}){GAP}\($')
LEFT_MMSE_NAME_EXT.partial_match('vaimse seisundi miniuuring (')
LEFT_MMSE_NAME_EXT.partial_match('Mini-Mental State Examination (')
LEFT_MMSE_NAME_EXT.partial_match('Vaimse seisundi miniuuringu (')
LEFT_MMSE_NAME_EXT.partial_match('Vaimse seisundi mini-uuringu (')
LEFT_MMSE_NAME_EXT.test()

RIGHT_MMSE_NAME_EXT = ExplainableRegex(rf'^({GAP}({MMSE_NAME_1}|\({MMSE_NAME_2}\)|\({MMSE_NAME_3}\)))|^{DASH}{MMSE_NAME_4}')
RIGHT_MMSE_NAME_EXT.partial_match(' Mini - mental test',' Mini - mental test')
RIGHT_MMSE_NAME_EXT.partial_match(' (VMU)',' (VMU)')
RIGHT_MMSE_NAME_EXT.partial_match(' (vaimse seisundi miniuuring)',' (vaimse seisundi miniuuring)')
RIGHT_MMSE_NAME_EXT.partial_match(' - Mini-Mental State Examination',' - Mini-Mental State Examination')
RIGHT_MMSE_NAME_EXT.no_partial_match(' something else ... Mini - mental test')
RIGHT_MMSE_NAME_EXT.no_partial_match(' something else ... - Mini-Mental State Examination')
RIGHT_MMSE_NAME_EXT.test()

MMSE_COMPLETED = r'([Tt]einud|[Tt]eostatud|[Tt]ehtud|[Tt]egin)'
LEFT_MMSE_COMPLETED_EXT = ExplainableRegex(rf'{MMSE_COMPLETED}{GAP}$')
LEFT_MMSE_COMPLETED_EXT.partial_match('teinud ', 'teinud ')
LEFT_MMSE_COMPLETED_EXT.partial_match('Teostatud ', 'Teostatud ')
LEFT_MMSE_COMPLETED_EXT.partial_match('tehtud ', 'tehtud ')
LEFT_MMSE_COMPLETED_EXT.partial_match('Tegin ', 'Tegin')
LEFT_MMSE_COMPLETED_EXT.test()

RIGHT_MMSE_COMPLETED_EXT = ExplainableRegex(rf'^({GAP})?,({GAP}? kus)?')
RIGHT_MMSE_COMPLETED_EXT.partial_match(', ',',')
RIGHT_MMSE_COMPLETED_EXT.partial_match(' ,',' ,')
RIGHT_MMSE_COMPLETED_EXT.partial_match(', kus', ', kus')
RIGHT_MMSE_COMPLETED_EXT.test()


# Payloads

PAYLOAD_END_1 = ExplainableRegex(r'([\r\n,.;\(\)\t ]|->|$)')
PAYLOAD_END_1.partial_match('','')
PAYLOAD_END_1.partial_match('\n','\n')
PAYLOAD_END_1.partial_match('\r','\r')
PAYLOAD_END_1.partial_match('\rx','\rx')
PAYLOAD_END_1.partial_match('.','.')
PAYLOAD_END_1.partial_match(';',';')
PAYLOAD_END_1.partial_match(')',')')
PAYLOAD_END_1.partial_match(') ',')')
PAYLOAD_END_1.partial_match('(1','(')
PAYLOAD_END_1.partial_match('  ',' ')
PAYLOAD_END_1.partial_match('\t ','\t')
PAYLOAD_END_1.partial_match(' \t a',' ')
PAYLOAD_END_1.partial_match('-> x','->')
PAYLOAD_END_1.test()

# Quick fix for segmenting errors
PAYLOAD_END_2 = ExplainableRegex(r'(CTA |CT-|CT |Patsien|Intensiiv|Vererõhk)')
PAYLOAD_END_2.partial_match('CTA ','CTA ')
PAYLOAD_END_2.partial_match('CT ','CT ')
PAYLOAD_END_2.partial_match('CT-','CT-')
PAYLOAD_END_2.partial_match('Patsient','Patsien')
PAYLOAD_END_2.partial_match('Intensiiv','Intensiiv')
PAYLOAD_END_2.partial_match('Vererõhk','Vererõhk')
PAYLOAD_END_2.test()

# Quick fix: Payloads are converted to lower letters
PAYLOAD_END = ExplainableRegex(rf'({PAYLOAD_END_1}|{PAYLOAD_END_2.lower()})')
PAYLOAD_END.partial_match('','')
PAYLOAD_END.partial_match('vererõhk','vererõhk')
PAYLOAD_END.test()

PAYLOAD_END_IS_NEEDED = ExplainableRegex(r'\(.*\)$')
PAYLOAD_END_IS_NEEDED.partial_match('(25)')
PAYLOAD_END_IS_NEEDED.no_partial_match(' 25)')
PAYLOAD_END_IS_NEEDED.test()

PAYLOAD_END_ELIMINATOR_1 = ExplainableRegex(r'[\r\n,.;\(\)]$|[\t ]+$|->$|$')
PAYLOAD_END_ELIMINATOR_1.partial_match('','')
PAYLOAD_END_ELIMINATOR_1.partial_match('\n','\n')
PAYLOAD_END_ELIMINATOR_1.partial_match('\nabba\r','\r')
PAYLOAD_END_ELIMINATOR_1.partial_match('a.','.')
PAYLOAD_END_ELIMINATOR_1.partial_match('b;',';')
PAYLOAD_END_ELIMINATOR_1.partial_match('.)',')')
PAYLOAD_END_ELIMINATOR_1.partial_match(' (','(')
PAYLOAD_END_ELIMINATOR_1.partial_match(') ',' ')
PAYLOAD_END_ELIMINATOR_1.partial_match('a  ','  ')
PAYLOAD_END_ELIMINATOR_1.partial_match(' \t ',' \t ')
PAYLOAD_END_ELIMINATOR_1.partial_match(' \t a','')
PAYLOAD_END_ELIMINATOR_1.partial_match('xx->','->')
PAYLOAD_END_ELIMINATOR_1.test()

PAYLOAD_END_ELIMINATOR = re.compile(rf'{PAYLOAD_END_ELIMINATOR_1}|({PAYLOAD_END_2}$)')


DARROW_PAYLOAD = ExplainableRegex(rf'^({DASH}|{GAP}){INITIAL_ENTRY}{ARROW}{MID_ENTRY}{ARROW}{FINAL_ENTRY}{PAYLOAD_END}')
DARROW_PAYLOAD.no_match(' 3')
DARROW_PAYLOAD.no_match(' 3->2')
DARROW_PAYLOAD.full_match(' 23 ->20 -> 12')
DARROW_PAYLOAD.full_match(' - 23p ->22 --> 5palli')
DARROW_PAYLOAD.full_match('-20 --> 2p --> 3p;')
DARROW_PAYLOAD.full_match(' 20>10>3p.')
DARROW_PAYLOAD.full_match(' 20 -> 12 -> 10,')
DARROW_PAYLOAD.full_match(' 20 -> 12 -> 10;')
DARROW_PAYLOAD.no_match('x 20 -> 12 -> 10;')
DARROW_PAYLOAD.test()


ARROW_ENTRY_1 = ExplainableRegex(rf'({INITIAL_ENTRY}{ARROW}{FINAL_ENTRY})')
ARROW_ENTRY_1.no_partial_match(' 3')
ARROW_ENTRY_1.no_partial_match(' -3')
ARROW_ENTRY_1.no_partial_match(' - 3')
ARROW_ENTRY_1.partial_match(' 23 ->2')
ARROW_ENTRY_1.partial_match(' - 23p ->2')
ARROW_ENTRY_1.partial_match('-20 --> 2p')
ARROW_ENTRY_1.partial_match('-20 --> 2p.')
ARROW_ENTRY_1.partial_match(' 20 --> 2p,')
ARROW_ENTRY_1.partial_match(' 20 --> 2p;')
ARROW_ENTRY_1.no_partial_match('x 3 -> 2')
ARROW_ENTRY_1.test()

ARROW_ENTRY_2 = ExplainableRegex(rf'((paranenud|tõusnud){GAP}{INITIAL_SCORE}(-lt|lt){GAP}{FINAL_SCORE}(-le|le))')
ARROW_ENTRY_2.partial_match('paranenud 22-lt 26-le.','paranenud 22-lt 26-le')
ARROW_ENTRY_2.partial_match('paranenud 22-lt 26-le.','22','initial_score')
ARROW_ENTRY_2.partial_match('paranenud 22-lt 26-le.','26','final_score')
ARROW_ENTRY_2.test()

ARROW_ENTRY_3 = ExplainableRegex(rf'((saabudes){GAP}{INITIAL_ENTRY}{COMA}(lahkudes){GAP}{FINAL_ENTRY})')
ARROW_ENTRY_3.partial_match('saabudes 23 p, lahkudes 20p','saabudes 23 p, lahkudes 20p')
ARROW_ENTRY_3.partial_match('saabudes 23 p, lahkudes 20p','23','initial_score')
ARROW_ENTRY_3.partial_match('saabudes 23 p, lahkudes 20p','20','final_score')
ARROW_ENTRY_3.test()

ARROW_ENTRY_4 = ExplainableRegex(rf'{INITIAL_ENTRY}{GAP}(saabumisel{GAP}>>|saabumisel){GAP}{FINAL_ENTRY}{GAP}(lahkumisel)')
ARROW_ENTRY_4.partial_match('3 palli saabumisel >> 1 palli lahkumisel','3 palli saabumisel >> 1 palli lahkumisel')
ARROW_ENTRY_4.partial_match('3 palli saabumisel >> 1 palli lahkumisel','3','initial_score')
ARROW_ENTRY_4.partial_match('3 palli saabumisel >> 1 palli lahkumisel','1','final_score')
ARROW_ENTRY_4.test()

ARROW_PAYLOAD = ExplainableRegex(
    rf'^(({DASH}|{GAP}){ARROW_ENTRY_1}|{GAP}({ARROW_ENTRY_2}|{ARROW_ENTRY_3}|{ARROW_ENTRY_4})){PAYLOAD_END}')
ARROW_PAYLOAD.no_match(' 3')
ARROW_PAYLOAD.no_match(' -3')
ARROW_PAYLOAD.no_match(' - 3')
ARROW_PAYLOAD.full_match(' 23 ->2')
ARROW_PAYLOAD.full_match(' - 23p ->2')
ARROW_PAYLOAD.full_match('-20 --> 2p')
ARROW_PAYLOAD.full_match(' 20 --> 2p.')
ARROW_PAYLOAD.full_match(' 20 --> 2p,')
ARROW_PAYLOAD.full_match(' 20 --> 2p;')
ARROW_PAYLOAD.no_match('x 3 -> 2')
ARROW_PAYLOAD.partial_match(' paranenud 22-lt 26-le.',' paranenud 22-lt 26-le.')
ARROW_PAYLOAD.partial_match(' saabudes 23 p, lahkudes 20p',' saabudes 23 p, lahkudes 20p')
ARROW_PAYLOAD.partial_match(' 3 palli saabumisel >> 1 palli lahkumisel',' 3 palli saabumisel >> 1 palli lahkumisel')
ARROW_PAYLOAD.test()


SHORT_PAYLOAD = ExplainableRegex(rf'^({DASH}|{GAP}|{EQ}|{COLON})?{SCORE_ENTRY}{PAYLOAD_END}')
SHORT_PAYLOAD.full_match('3')
SHORT_PAYLOAD.full_match(' 3')
SHORT_PAYLOAD.full_match('  3')
SHORT_PAYLOAD.full_match('-3')
SHORT_PAYLOAD.full_match('=3')
SHORT_PAYLOAD.full_match(' - 5')
SHORT_PAYLOAD.full_match(' = 3')
SHORT_PAYLOAD.full_match('- 3')
SHORT_PAYLOAD.full_match(' -3')
SHORT_PAYLOAD.full_match(' 3p')
SHORT_PAYLOAD.full_match(' 3p.')
SHORT_PAYLOAD.full_match(' 3p,')
SHORT_PAYLOAD.full_match(' 3p;')
SHORT_PAYLOAD.full_match(': 3p')
SHORT_PAYLOAD.full_match(' : 3p')
SHORT_PAYLOAD.no_match('x 3')
SHORT_PAYLOAD.partial_match('3 pankreatiit','3 ')
SHORT_PAYLOAD.partial_match('3 p. ta','3 p.')
SHORT_PAYLOAD.partial_match('3.p. ta','3.p.')
SHORT_PAYLOAD.no_match(' 3p --> 1')
SHORT_PAYLOAD.partial_match(' 3p --> 1')
SHORT_PAYLOAD.test()

SHORT_RANGE_PAYLOAD = ExplainableRegex(rf'^({GAP}|{EQ}|{COLON}){SCORE_RANGE}{PAYLOAD_END}')
SHORT_RANGE_PAYLOAD.partial_match(' 3-4',' 3-4')
SHORT_RANGE_PAYLOAD.partial_match('  3 - 4 ','  3 - 4 ')
SHORT_RANGE_PAYLOAD.partial_match('= 3-4 panama','= 3-4 ')
SHORT_RANGE_PAYLOAD.partial_match(' = 3 -4',' = 3 -4')
SHORT_RANGE_PAYLOAD.partial_match(' 3 - 4p',' 3 - 4p')
SHORT_RANGE_PAYLOAD.partial_match(' 3-6p. ',' 3-6p.')
SHORT_RANGE_PAYLOAD.partial_match(' 3-7p,xx',' 3-7p,')
SHORT_RANGE_PAYLOAD.partial_match(' 3-4p;\nx',' 3-4p;')
SHORT_RANGE_PAYLOAD.partial_match(': 3-8p',': 3-8p')
SHORT_RANGE_PAYLOAD.partial_match(' : 3-4p',' : 3-4p')
SHORT_RANGE_PAYLOAD.partial_match(' 3p - 4p xx',' 3p - 4p ')
SHORT_RANGE_PAYLOAD.no_partial_match('-3-4')
SHORT_RANGE_PAYLOAD.no_partial_match('- 3-4')
SHORT_RANGE_PAYLOAD.no_partial_match(' - 5-4')
SHORT_RANGE_PAYLOAD.no_partial_match(' 3 palli - 4p')
SHORT_RANGE_PAYLOAD.no_partial_match(' 3p --> 1')
SHORT_RANGE_PAYLOAD.no_partial_match('x 3-4')
SHORT_RANGE_PAYLOAD.test()

SHORT_RATIO_PAYLOAD = ExplainableRegex(rf'^({DASH}|{GAP}|{EQ}|{COLON})?{SCORE_RATIO}{PAYLOAD_END}')
SHORT_RATIO_PAYLOAD.partial_match('3/10','3/10')
SHORT_RATIO_PAYLOAD.partial_match(' 3/10',' 3/10')
SHORT_RATIO_PAYLOAD.partial_match('3/10p','3/10p')
SHORT_RATIO_PAYLOAD.partial_match('3/10 punkti','3/10 punkti')
SHORT_RATIO_PAYLOAD.partial_match(' 3/ 10',' 3/ 10')
SHORT_RATIO_PAYLOAD.partial_match('= 3/4\n','= 3/4\n')
SHORT_RATIO_PAYLOAD.partial_match('= 3 / 4','= 3 / 4')
SHORT_RATIO_PAYLOAD.partial_match('-3/4\tx','-3/4\t')
SHORT_RATIO_PAYLOAD.partial_match('- 3/4 x','- 3/4 ')
SHORT_RATIO_PAYLOAD.partial_match(': 3/8',': 3/8')
SHORT_RATIO_PAYLOAD.partial_match(' : 3/4',' : 3/4')
SHORT_RATIO_PAYLOAD.partial_match(' 3/6.x',' 3/6.')
SHORT_RATIO_PAYLOAD.partial_match(' 3/7, ',' 3/7,')
SHORT_RATIO_PAYLOAD.partial_match(' 3/4; x',' 3/4;')
SHORT_RATIO_PAYLOAD.partial_match(' 3/4) ',' 3/4)')
SHORT_RATIO_PAYLOAD.no_partial_match('x 3/4')
SHORT_RATIO_PAYLOAD.test()

# Potential payloads to be verified further

TEXT_PREFIX = rf'^({GAP}|{DASH}|{COLON})(?P<text>.+?){GAP}'

POTENTIAL_ARROW_PAYLOAD = ExplainableRegex(
    rf'^{TEXT_PREFIX}({DASH}?{ARROW_ENTRY_1}|{ARROW_ENTRY_2}|{ARROW_ENTRY_3}|{ARROW_ENTRY_4}){PAYLOAD_END}')
POTENTIAL_ARROW_PAYLOAD.partial_match(' dünaamika 20 --> 2p.',' dünaamika 20 --> 2p.')
POTENTIAL_ARROW_PAYLOAD.partial_match(' dünaamika 20 --> 2p.','dünaamika','text')
POTENTIAL_ARROW_PAYLOAD.partial_match(' skoor paranenud 22-lt 26-le.',' skoor paranenud 22-lt 26-le.')
POTENTIAL_ARROW_PAYLOAD.partial_match(' skoor saabudes 23 p, lahkudes 20p',' skoor saabudes 23 p, lahkudes 20p')
POTENTIAL_ARROW_PAYLOAD.partial_match(' skoor 3 palli saabumisel >> 1 palli lahkumisel',' skoor 3 palli saabumisel >> 1 palli lahkumisel')


POTENTIAL_SHORT_SCORE_PAYLOAD = ExplainableRegex(rf'{TEXT_PREFIX}(?P<iscore>{SCORE_ENTRY}){PAYLOAD_END}')
POTENTIAL_SHORT_SCORE_PAYLOAD.partial_match(' skoor 28','skoor','text')
POTENTIAL_SHORT_SCORE_PAYLOAD.partial_match('- skoor 28','skoor','text')
POTENTIAL_SHORT_SCORE_PAYLOAD.partial_match('- skoor 28 veel teksti ja 30','skoor','text')
POTENTIAL_SHORT_SCORE_PAYLOAD.no_partial_match(' tavatekst\n skoor 28')
POTENTIAL_SHORT_SCORE_PAYLOAD.test()

POTENTIAL_SHORT_SCORE_RANGE_PAYLOAD = ExplainableRegex(rf'{TEXT_PREFIX}{TEXTUAL_SCORE_RANGE}{PAYLOAD_END}')
POTENTIAL_SHORT_SCORE_RANGE_PAYLOAD.partial_match(' skoor 20 - 25 ','skoor','text')
POTENTIAL_SHORT_SCORE_RANGE_PAYLOAD.partial_match('- skoor 20 - 25)','skoor','text')
POTENTIAL_SHORT_SCORE_RANGE_PAYLOAD.partial_match('- skoor 20 - 25 veel teksti ja 30','skoor','text')
POTENTIAL_SHORT_SCORE_RANGE_PAYLOAD.no_partial_match(' tavatekst\n skoor 28-29')
POTENTIAL_SHORT_SCORE_RANGE_PAYLOAD.test()

POTENTIAL_SHORT_SCORE_RATIO_PAYLOAD = ExplainableRegex(rf'{TEXT_PREFIX}{TEXTUAL_SCORE_RATIO}{PAYLOAD_END}')
POTENTIAL_SHORT_SCORE_RATIO_PAYLOAD.partial_match(' sai 20/30 punkti;',' sai 20/30 punkti;')
POTENTIAL_SHORT_SCORE_RATIO_PAYLOAD.partial_match('- saab 20 punkti 30-st.','- saab 20 punkti 30-st.')
POTENTIAL_SHORT_SCORE_RATIO_PAYLOAD.no_partial_match('(20/30)')
POTENTIAL_SHORT_SCORE_RATIO_PAYLOAD.no_partial_match('  (20/30)')
POTENTIAL_SHORT_SCORE_RATIO_PAYLOAD.partial_match(' saab  (20/30) ',' saab  (20/30) ')
POTENTIAL_SHORT_SCORE_RATIO_PAYLOAD.test()


# Context validation

RIGHT_COMMENT = ExplainableRegex(rf'->{GAP}?(?P<text>.*)\.|^{DASH}(?P<text>.*)\.|^\((?P<text>.*)\)')
RIGHT_COMMENT.partial_match('- word and word. Other text','word and word','text')
RIGHT_COMMENT.partial_match(' - word and word. Other text','word and word','text')
RIGHT_COMMENT.partial_match('(word. word) Other text','word. word','text')
RIGHT_COMMENT.partial_match('(word. word). Other text','word. word','text')
RIGHT_COMMENT.test()

SPURIOUS_NIH_SCORE_1 = ExplainableRegex(rf'^NIH({DASH}|{GAP})?[0-9]{DASH}[0-9]{DASH}[0-9]')
SPURIOUS_NIH_SCORE_1.partial_match('NIH0-1-1-3')
SPURIOUS_NIH_SCORE_1.partial_match('NIH-0-1-1-3')
SPURIOUS_NIH_SCORE_1.partial_match('NIH 0-1-1-3')
SPURIOUS_NIH_SCORE_1.partial_match('NIH 0 - 1 - 1 - 3')
SPURIOUS_NIH_SCORE_1.partial_match('NIH 2-3 palli')
SPURIOUS_NIH_SCORE_1.test()

SPURIOUS_NIH_SCORE_2 = ExplainableRegex(rf'^N[iI]H({DASH}|{GAP})?[0-9]({GAP})?\(({GAP})?[0-9]({DASH})?[a-z],')
SPURIOUS_NIH_SCORE_2.partial_match('NiH - 5(1 - c, 3 - 2, 4 - 2')
SPURIOUS_NIH_SCORE_2.partial_match('NiH - 5 (1 - c, 3 - 2, 4 - 2')
SPURIOUS_NIH_SCORE_2.partial_match('NiH - 5 ( 1 - c, 3 - 2, 4 - 2')
SPURIOUS_NIH_SCORE_2.partial_match('NiH-7(1b, 3-2, 4-4)')
SPURIOUS_NIH_SCORE_2.partial_match('NiH - 7 (1b, 3-2, 4-4)')
SPURIOUS_NIH_SCORE_2.test()
